name: CI

on:
  push:
    paths:
      - "**"
  pull_request:
    branches:
      - master
    paths:
      - "**"
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.julia-version }}-${{ matrix.os }}-${{ matrix.test }}-${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 240
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        test:
          - "part1"
          - "part2"
          - "part3"
        julia-version:
          - "1.10"
          - "1"
        os:
          - ubuntu-latest
        include:
          - os: windows-latest
            julia-version: "1"
            test: "part1"
          - os: windows-latest
            julia-version: "1"
            test: "part2"
          - os: windows-latest
            julia-version: "1"
            test: "part3"
          - os: macOS-latest
            julia-version: "1"
            test: "part1"
          - os: macOS-latest
            julia-version: "1"
            test: "part2"
          - os: macOS-latest
            julia-version: "1"
            test: "part3"
          - os: ubuntu-latest
            julia-version: "1"
            test: "enzyme"
          - os: ubuntu-latest
            julia-version: "1"
            test: "jet"

    steps:
      - uses: actions/checkout@v5
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
      - name: "Cache dependencies"
        uses: julia-actions/cache@v2
        with:
          cache-name: julia-cache;workflow=${{ github.workflow }};job=${{ github.job }};os=${{ matrix.os }};julia=${{ matrix.julia-version }};project=${{ hashFiles('**/Project.toml') }}
      - name: "Build package"
        uses: julia-actions/julia-buildpkg@v1
      - name: "Install Enzyme (if needed)"
        if: matrix.test == 'enzyme'
        run: julia --color=yes --project=test -e 'import Pkg; Pkg.add("Enzyme")'
      - name: "Install JET (if needed)"
        if: matrix.test == 'jet'
        run: julia --color=yes --project=test -e 'import Pkg; Pkg.add("JET")'
      - name: "Run tests"
        env:
          SYMBOLIC_REGRESSION_TEST_SUITE: ${{ matrix.test }}
        run: |
          julia --color=yes -e 'import Pkg; Pkg.add("Coverage")'
          julia --color=yes --threads=auto --check-bounds=yes --depwarn=yes --code-coverage=user -e 'import Coverage; import Pkg; Pkg.activate("."); Pkg.test(coverage=true)'
          julia --color=yes coverage.jl
        shell: bash
      - name: "Upload coverage artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.julia-version }}-${{ matrix.os }}-${{ matrix.test }}
          path: lcov.info
          retention-days: 1

  upload-coverage:
    name: Upload Coverage to Codecov
    needs: test
    runs-on: ubuntu-latest
    # Only run on pushes to master or pull requests
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - uses: actions/checkout@v5
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: coverage-*
          path: coverage
      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: true
          verbose: true
